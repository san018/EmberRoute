{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","new/tests/lint/app.lint-test.js","new/tests/lint/templates.template.lint-test.js","new/tests/lint/tests.lint-test.js","new/tests/test-helper.js","new/tests/unit/controllers/contact-test.js","new/tests/unit/models/contact-test.js","new/tests/unit/routes/about-test.js","new/tests/unit/routes/contact-test.js","new/tests/unit/routes/error-test.js","new/tests/unit/routes/missing-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"new/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/contact.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/contact.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/about.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/about.js should pass ESLint\\n\\n25:9 - \\'params\\' is defined but never used. (no-unused-vars)');\n  });\n  QUnit.test('routes/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/contact.js should pass ESLint\\n\\n26:5 - \\'queryParams:\\' is defined but never used. (no-unused-labels)\\n27:9 - \\'id:\\' is defined but never used. (no-unused-labels)\\n32:7 - Unexpected console statement. (no-console)\\n49:15 - Unreachable code. (no-unreachable)\\n57:11 - Unexpected console statement. (no-console)\\n61:23 - \\'i\\' is already defined. (no-redeclare)\\n62:19 - \\'x\\' is already defined. (no-redeclare)\\n63:20 - \\'obj\\' is already defined. (no-redeclare)\\n65:25 - \\'key\\' is already defined. (no-redeclare)\\n66:22 - \\'value\\' is already defined. (no-redeclare)');\n  });\n  QUnit.test('routes/error.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/error.js should pass ESLint\\n\\n2:5 - \\'arr\\' is assigned a value but never used. (no-unused-vars)\\n25:9 - \\'params\\' is defined but never used. (no-unused-vars)');\n  });\n  QUnit.test('routes/missing.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/missing.js should pass ESLint\\n\\n');\n  });\n});","define(\"new/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('new/templates/about-loading.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'new/templates/about-loading.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('new/templates/about.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'new/templates/about.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('new/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'new/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('new/templates/contact.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'new/templates/contact.hbs should pass TemplateLint.\\n\\nnew/templates/contact.hbs\\n  9:0  error  HTML comment detected  no-html-comments\\n  10:0  error  HTML comment detected  no-html-comments\\n');\n  });\n  QUnit.test('new/templates/error-loading.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'new/templates/error-loading.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('new/templates/error.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'new/templates/error.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('new/templates/missing.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'new/templates/missing.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"new/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/contact-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/contact-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/contact-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/contact-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/about-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/about-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/contact-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/contact-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/error-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/error-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/missing-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/missing-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"new/tests/test-helper\", [\"new/app\", \"new/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"new/tests/unit/controllers/contact-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | contact', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:contact');\n      assert.ok(controller);\n    });\n  });\n});","define(\"new/tests/unit/models/contact-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | contact', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('contact', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"new/tests/unit/routes/about-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | about', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:about');\n      assert.ok(route);\n    });\n  });\n});","define(\"new/tests/unit/routes/contact-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | contact', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:contact');\n      assert.ok(route);\n    });\n  });\n});","define(\"new/tests/unit/routes/error-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | error', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:error');\n      assert.ok(route);\n    });\n  });\n});","define(\"new/tests/unit/routes/missing-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | missing', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:missing');\n      assert.ok(route);\n    });\n  });\n});","define('new/config/environment', [], function() {\n  var prefix = 'new';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('new/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}